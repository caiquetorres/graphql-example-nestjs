# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Base {
  active: Boolean
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

type Category implements Base {
  active: Boolean
  createdAt: DateTime
  id: ID
  name: String!
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
  updatedAt: DateTime
}

type CategoryConnection {
  """Array of edges."""
  edges: [CategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type CategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Category"""
  node: Category!
}

input CategoryFilter {
  active: BooleanFieldComparison
  and: [CategoryFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [CategoryFilter!]
  updatedAt: DateFieldComparison
}

input CategorySort {
  direction: SortDirection!
  field: CategorySortFields!
  nulls: SortNulls
}

enum CategorySortFields {
  active
  createdAt
  id
  name
  updatedAt
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateCategoryInput {
  name: String!
}

input CreatePostCategoryInput {
  categoryId: String!
  postId: String!
}

input CreatePostInput {
  description: String!
  imageUrl: String
  title: String!
  userId: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createCategory(input: CreateCategoryInput!): Category!
  createPost(input: CreatePostInput!): Post!
  createPostCategory(input: [CreatePostCategoryInput!]!): PostCategory!
  createUser(input: CreateUserInput!): User!
  deleteCategory(categoryId: String!): Category!
  deletePost(postId: String!): Post!
  deletePostCategory(postCategoryId: String!): PostCategory!
  deleteUser(userId: String!): User!
  disableCategory(categoryId: String!): Category!
  disablePost(postId: String!): Post!
  disablePostCategoryId(disablePostCategoryId: String!): PostCategory!
  disableUser(userId: String!): User!
  enableCategory(categoryId: String!): Category!
  enablePost(postId: String!): Post!
  enableUser(postCategoryId: String!): PostCategory!
  login(input: LoginInput!): TokenModel!
  updateCategory(categoryId: String!, input: UpdateCategoryInput!): Category!
  updatePost(input: UpdatePostInput!, postId: String!): Post!
  updatePostCategory(input: UpdatePostCategoryInput!, postCategoryId: String!): PostCategory!
  updateUser(input: UpdateUserInput!, userId: String!): User!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Post implements Base {
  active: Boolean
  categories(
    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): CategoryConnection!
  createdAt: DateTime
  description: String
  id: ID
  imageUrl: String
  title: String
  updatedAt: DateTime
  user: User!
  userId: ID
}

type PostCategory implements Base {
  active: Boolean
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

type PostCategoryConnection {
  """Array of edges."""
  edges: [PostCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type PostCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PostCategory"""
  node: PostCategory!
}

input PostCategoryFilter {
  active: BooleanFieldComparison
  and: [PostCategoryFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  or: [PostCategoryFilter!]
  updatedAt: DateFieldComparison
}

input PostCategorySort {
  direction: SortDirection!
  field: PostCategorySortFields!
  nulls: SortNulls
}

enum PostCategorySortFields {
  active
  createdAt
  id
  updatedAt
}

type PostConnection {
  """Array of edges."""
  edges: [PostEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type PostEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Post"""
  node: Post!
}

input PostFilter {
  active: BooleanFieldComparison
  and: [PostFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  or: [PostFilter!]
  title: StringFieldComparison
  updatedAt: DateFieldComparison
  userId: IDFilterComparison
}

input PostSort {
  direction: SortDirection!
  field: PostSortFields!
  nulls: SortNulls
}

enum PostSortFields {
  active
  createdAt
  description
  id
  title
  updatedAt
  userId
}

type Query {
  categories(
    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): CategoryConnection!
  category(categoryId: String!): Category!
  me: User!
  post(postId: String!): Post!
  postCategories(
    """Specify to filter the records returned."""
    filter: PostCategoryFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostCategorySort!] = []
  ): PostCategoryConnection!
  postCategory(postCategoryId: String!): PostCategory!
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
  user(userId: String!): User!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type TokenModel {
  expiresIn: String!
  token: String!
}

input UpdateCategoryInput {
  name: String
}

input UpdatePostCategoryInput {
  categoryId: String!
  postId: String!
}

input UpdatePostInput {
  description: String
  imageUrl: String
  title: String
}

input UpdateUserInput {
  name: String
}

type User implements Base {
  active: Boolean
  createdAt: DateTime
  email: String
  id: ID
  name: String
  permissions: String
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
  updatedAt: DateTime
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  active: BooleanFieldComparison
  and: [UserFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserFilter!]
  updatedAt: DateFieldComparison
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  active
  createdAt
  email
  id
  name
  updatedAt
}
